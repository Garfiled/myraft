// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raftpb.proto
#ifndef GRPC_raftpb_2eproto__INCLUDED
#define GRPC_raftpb_2eproto__INCLUDED

#include "raftpb.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace raftpb {

class raftService {
 public:
  static constexpr char const* service_full_name() {
    return "raftpb.raftService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::raftpb::RespVote* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespVote>> AsyncRequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespVote>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespVote>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespVote>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::raftpb::RespAppendEntry* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespAppendEntry>> AsyncAppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespAppendEntry>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespAppendEntry>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespAppendEntry>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::raftpb::RespTran* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespTran>> AsyncTran(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespTran>>(AsyncTranRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespTran>> PrepareAsyncTran(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespTran>>(PrepareAsyncTranRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespVote* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespVote* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespAppendEntry* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespAppendEntry* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespAppendEntry* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Tran(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespTran* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Tran(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespTran* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Tran(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespTran* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespVote>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespVote>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespAppendEntry>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespAppendEntry>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespTran>* AsyncTranRaw(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raftpb::RespTran>* PrepareAsyncTranRaw(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::raftpb::RespVote* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespVote>> AsyncRequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespVote>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespVote>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespVote>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::raftpb::RespAppendEntry* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespAppendEntry>> AsyncAppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespAppendEntry>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespAppendEntry>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespAppendEntry>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::raftpb::RespTran* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespTran>> AsyncTran(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespTran>>(AsyncTranRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespTran>> PrepareAsyncTran(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raftpb::RespTran>>(PrepareAsyncTranRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response, std::function<void(::grpc::Status)>) override;
      void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespVote* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestVote(::grpc::ClientContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespVote* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespVote* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespAppendEntry* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AppendEntries(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespAppendEntry* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespAppendEntry* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response, std::function<void(::grpc::Status)>) override;
      void Tran(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespTran* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tran(::grpc::ClientContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Tran(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespTran* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Tran(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raftpb::RespTran* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::raftpb::RespVote>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftpb::RespVote>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftpb::ReqVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftpb::RespAppendEntry>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftpb::RespAppendEntry>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftpb::ReqAppendEntry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftpb::RespTran>* AsyncTranRaw(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raftpb::RespTran>* PrepareAsyncTranRaw(::grpc::ClientContext* context, const ::raftpb::ReqTran& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_Tran_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response);
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response);
    virtual ::grpc::Status Tran(::grpc::ServerContext* context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::raftpb::ReqVote* request, ::grpc::ServerAsyncResponseWriter< ::raftpb::RespVote>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::raftpb::ReqAppendEntry* request, ::grpc::ServerAsyncResponseWriter< ::raftpb::RespAppendEntry>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tran : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Tran() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Tran() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tran(::grpc::ServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTran(::grpc::ServerContext* context, ::raftpb::ReqTran* request, ::grpc::ServerAsyncResponseWriter< ::raftpb::RespTran>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestVote<WithAsyncMethod_AppendEntries<WithAsyncMethod_Tran<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestVote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::raftpb::ReqVote, ::raftpb::RespVote>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::raftpb::ReqVote* request, ::raftpb::RespVote* response) { return this->RequestVote(context, request, response); }));}
    void SetMessageAllocatorFor_RequestVote(
        ::grpc::experimental::MessageAllocator< ::raftpb::ReqVote, ::raftpb::RespVote>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::raftpb::ReqVote, ::raftpb::RespVote>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestVote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AppendEntries() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::raftpb::ReqAppendEntry, ::raftpb::RespAppendEntry>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::raftpb::ReqAppendEntry* request, ::raftpb::RespAppendEntry* response) { return this->AppendEntries(context, request, response); }));}
    void SetMessageAllocatorFor_AppendEntries(
        ::grpc::experimental::MessageAllocator< ::raftpb::ReqAppendEntry, ::raftpb::RespAppendEntry>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::raftpb::ReqAppendEntry, ::raftpb::RespAppendEntry>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AppendEntries(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Tran : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Tran() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::raftpb::ReqTran, ::raftpb::RespTran>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::raftpb::ReqTran* request, ::raftpb::RespTran* response) { return this->Tran(context, request, response); }));}
    void SetMessageAllocatorFor_Tran(
        ::grpc::experimental::MessageAllocator< ::raftpb::ReqTran, ::raftpb::RespTran>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::raftpb::ReqTran, ::raftpb::RespTran>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Tran() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tran(::grpc::ServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tran(
      ::grpc::CallbackServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tran(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RequestVote<ExperimentalWithCallbackMethod_AppendEntries<ExperimentalWithCallbackMethod_Tran<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RequestVote<ExperimentalWithCallbackMethod_AppendEntries<ExperimentalWithCallbackMethod_Tran<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tran : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Tran() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Tran() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tran(::grpc::ServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestVote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tran : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Tran() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Tran() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tran(::grpc::ServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTran(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestVote() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestVote(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestVote(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AppendEntries() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendEntries(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AppendEntries(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Tran : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Tran() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Tran(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Tran() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tran(::grpc::ServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Tran(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Tran(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftpb::ReqVote, ::raftpb::RespVote>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::raftpb::ReqVote, ::raftpb::RespVote>* streamer) {
                       return this->StreamedRequestVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::raftpb::ReqVote* /*request*/, ::raftpb::RespVote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftpb::ReqVote,::raftpb::RespVote>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftpb::ReqAppendEntry, ::raftpb::RespAppendEntry>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::raftpb::ReqAppendEntry, ::raftpb::RespAppendEntry>* streamer) {
                       return this->StreamedAppendEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::raftpb::ReqAppendEntry* /*request*/, ::raftpb::RespAppendEntry* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftpb::ReqAppendEntry,::raftpb::RespAppendEntry>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tran : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Tran() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::raftpb::ReqTran, ::raftpb::RespTran>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::raftpb::ReqTran, ::raftpb::RespTran>* streamer) {
                       return this->StreamedTran(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Tran() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tran(::grpc::ServerContext* /*context*/, const ::raftpb::ReqTran* /*request*/, ::raftpb::RespTran* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTran(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raftpb::ReqTran,::raftpb::RespTran>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_Tran<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_Tran<Service > > > StreamedService;
};

}  // namespace raftpb


#endif  // GRPC_raftpb_2eproto__INCLUDED
