// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftpb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftpb_2eproto;
namespace raftpb {
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class ReqAppendEntry;
class ReqAppendEntryDefaultTypeInternal;
extern ReqAppendEntryDefaultTypeInternal _ReqAppendEntry_default_instance_;
class ReqTran;
class ReqTranDefaultTypeInternal;
extern ReqTranDefaultTypeInternal _ReqTran_default_instance_;
class ReqVote;
class ReqVoteDefaultTypeInternal;
extern ReqVoteDefaultTypeInternal _ReqVote_default_instance_;
class RespAppendEntry;
class RespAppendEntryDefaultTypeInternal;
extern RespAppendEntryDefaultTypeInternal _RespAppendEntry_default_instance_;
class RespTran;
class RespTranDefaultTypeInternal;
extern RespTranDefaultTypeInternal _RespTran_default_instance_;
class RespVote;
class RespVoteDefaultTypeInternal;
extern RespVoteDefaultTypeInternal _RespVote_default_instance_;
}  // namespace raftpb
PROTOBUF_NAMESPACE_OPEN
template<> ::raftpb::Entry* Arena::CreateMaybeMessage<::raftpb::Entry>(Arena*);
template<> ::raftpb::ReqAppendEntry* Arena::CreateMaybeMessage<::raftpb::ReqAppendEntry>(Arena*);
template<> ::raftpb::ReqTran* Arena::CreateMaybeMessage<::raftpb::ReqTran>(Arena*);
template<> ::raftpb::ReqVote* Arena::CreateMaybeMessage<::raftpb::ReqVote>(Arena*);
template<> ::raftpb::RespAppendEntry* Arena::CreateMaybeMessage<::raftpb::RespAppendEntry>(Arena*);
template<> ::raftpb::RespTran* Arena::CreateMaybeMessage<::raftpb::RespTran>(Arena*);
template<> ::raftpb::RespVote* Arena::CreateMaybeMessage<::raftpb::RespVote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftpb {

enum raftState : int {
  Follower = 0,
  Candidate = 1,
  Leader = 2,
  raftState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  raftState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool raftState_IsValid(int value);
constexpr raftState raftState_MIN = Follower;
constexpr raftState raftState_MAX = Leader;
constexpr int raftState_ARRAYSIZE = raftState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* raftState_descriptor();
template<typename T>
inline const std::string& raftState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, raftState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function raftState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    raftState_descriptor(), enum_t_value);
}
inline bool raftState_Parse(
    const std::string& name, raftState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<raftState>(
    raftState_descriptor(), name, value);
}
// ===================================================================

class ReqVote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ReqVote) */ {
 public:
  ReqVote();
  virtual ~ReqVote();

  ReqVote(const ReqVote& from);
  ReqVote(ReqVote&& from) noexcept
    : ReqVote() {
    *this = ::std::move(from);
  }

  inline ReqVote& operator=(const ReqVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqVote& operator=(ReqVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqVote* internal_default_instance() {
    return reinterpret_cast<const ReqVote*>(
               &_ReqVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqVote& a, ReqVote& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqVote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqVote* New() const final {
    return CreateMaybeMessage<ReqVote>(nullptr);
  }

  ReqVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqVote& from);
  void MergeFrom(const ReqVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ReqVote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kLastLogTermFieldNumber = 3,
    kLastLogIndexFieldNumber = 4,
    kCandidateIdFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lastLogTerm = 3;
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lastLogIndex = 4;
  void clear_lastlogindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 candidateId = 2;
  void clear_candidateid();
  ::PROTOBUF_NAMESPACE_ID::uint32 candidateid() const;
  void set_candidateid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_candidateid() const;
  void _internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ReqVote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 candidateid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// -------------------------------------------------------------------

class RespVote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.RespVote) */ {
 public:
  RespVote();
  virtual ~RespVote();

  RespVote(const RespVote& from);
  RespVote(RespVote&& from) noexcept
    : RespVote() {
    *this = ::std::move(from);
  }

  inline RespVote& operator=(const RespVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespVote& operator=(RespVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespVote* internal_default_instance() {
    return reinterpret_cast<const RespVote*>(
               &_RespVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RespVote& a, RespVote& b) {
    a.Swap(&b);
  }
  inline void Swap(RespVote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespVote* New() const final {
    return CreateMaybeMessage<RespVote>(nullptr);
  }

  RespVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespVote& from);
  void MergeFrom(const RespVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.RespVote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool voteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.RespVote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// -------------------------------------------------------------------

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// -------------------------------------------------------------------

class ReqAppendEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ReqAppendEntry) */ {
 public:
  ReqAppendEntry();
  virtual ~ReqAppendEntry();

  ReqAppendEntry(const ReqAppendEntry& from);
  ReqAppendEntry(ReqAppendEntry&& from) noexcept
    : ReqAppendEntry() {
    *this = ::std::move(from);
  }

  inline ReqAppendEntry& operator=(const ReqAppendEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAppendEntry& operator=(ReqAppendEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAppendEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAppendEntry* internal_default_instance() {
    return reinterpret_cast<const ReqAppendEntry*>(
               &_ReqAppendEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqAppendEntry& a, ReqAppendEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAppendEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAppendEntry* New() const final {
    return CreateMaybeMessage<ReqAppendEntry>(nullptr);
  }

  ReqAppendEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAppendEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAppendEntry& from);
  void MergeFrom(const ReqAppendEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAppendEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ReqAppendEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kTermFieldNumber = 1,
    kPrevLogTermFieldNumber = 3,
    kPrevLogIndexFieldNumber = 4,
    kLeaderCommitIndexFieldNumber = 6,
    kLeaderIdFieldNumber = 2,
  };
  // repeated .raftpb.Entry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raftpb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
      mutable_entries();
  private:
  const ::raftpb::Entry& _internal_entries(int index) const;
  ::raftpb::Entry* _internal_add_entries();
  public:
  const ::raftpb::Entry& entries(int index) const;
  ::raftpb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
      entries() const;

  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prevLogTerm = 3;
  void clear_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prevlogterm() const;
  void _internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prevLogIndex = 4;
  void clear_prevlogindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prevlogindex() const;
  void _internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 leaderCommitIndex = 6;
  void clear_leadercommitindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 leadercommitindex() const;
  void set_leadercommitindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leadercommitindex() const;
  void _internal_set_leadercommitindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 leaderId = 2;
  void clear_leaderid();
  ::PROTOBUF_NAMESPACE_ID::uint32 leaderid() const;
  void set_leaderid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leaderid() const;
  void _internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ReqAppendEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leadercommitindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leaderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// -------------------------------------------------------------------

class RespAppendEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.RespAppendEntry) */ {
 public:
  RespAppendEntry();
  virtual ~RespAppendEntry();

  RespAppendEntry(const RespAppendEntry& from);
  RespAppendEntry(RespAppendEntry&& from) noexcept
    : RespAppendEntry() {
    *this = ::std::move(from);
  }

  inline RespAppendEntry& operator=(const RespAppendEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespAppendEntry& operator=(RespAppendEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespAppendEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespAppendEntry* internal_default_instance() {
    return reinterpret_cast<const RespAppendEntry*>(
               &_RespAppendEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RespAppendEntry& a, RespAppendEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RespAppendEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespAppendEntry* New() const final {
    return CreateMaybeMessage<RespAppendEntry>(nullptr);
  }

  RespAppendEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespAppendEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespAppendEntry& from);
  void MergeFrom(const RespAppendEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespAppendEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.RespAppendEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.RespAppendEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// -------------------------------------------------------------------

class ReqTran :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.ReqTran) */ {
 public:
  ReqTran();
  virtual ~ReqTran();

  ReqTran(const ReqTran& from);
  ReqTran(ReqTran&& from) noexcept
    : ReqTran() {
    *this = ::std::move(from);
  }

  inline ReqTran& operator=(const ReqTran& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTran& operator=(ReqTran&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqTran& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqTran* internal_default_instance() {
    return reinterpret_cast<const ReqTran*>(
               &_ReqTran_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqTran& a, ReqTran& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTran* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTran* New() const final {
    return CreateMaybeMessage<ReqTran>(nullptr);
  }

  ReqTran* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTran>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTran& from);
  void MergeFrom(const ReqTran& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTran* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.ReqTran";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kSrcFieldNumber = 1,
  };
  // bytes record = 2;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // uint32 src = 1;
  void clear_src();
  ::PROTOBUF_NAMESPACE_ID::uint32 src() const;
  void set_src(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src() const;
  void _internal_set_src(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.ReqTran)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// -------------------------------------------------------------------

class RespTran :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftpb.RespTran) */ {
 public:
  RespTran();
  virtual ~RespTran();

  RespTran(const RespTran& from);
  RespTran(RespTran&& from) noexcept
    : RespTran() {
    *this = ::std::move(from);
  }

  inline RespTran& operator=(const RespTran& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespTran& operator=(RespTran&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RespTran& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespTran* internal_default_instance() {
    return reinterpret_cast<const RespTran*>(
               &_RespTran_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RespTran& a, RespTran& b) {
    a.Swap(&b);
  }
  inline void Swap(RespTran* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RespTran* New() const final {
    return CreateMaybeMessage<RespTran>(nullptr);
  }

  RespTran* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RespTran>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RespTran& from);
  void MergeFrom(const RespTran& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespTran* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftpb.RespTran";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftpb_2eproto);
    return ::descriptor_table_raftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrFieldNumber = 1,
  };
  // string errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 err = 1;
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::uint32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftpb.RespTran)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqVote

// uint64 term = 1;
inline void ReqVote::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqVote::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqVote::term() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqVote.term)
  return _internal_term();
}
inline void ReqVote::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void ReqVote::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqVote.term)
}

// uint32 candidateId = 2;
inline void ReqVote::clear_candidateid() {
  candidateid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqVote::_internal_candidateid() const {
  return candidateid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqVote::candidateid() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqVote.candidateId)
  return _internal_candidateid();
}
inline void ReqVote::_internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  candidateid_ = value;
}
inline void ReqVote::set_candidateid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqVote.candidateId)
}

// uint64 lastLogTerm = 3;
inline void ReqVote::clear_lastlogterm() {
  lastlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqVote::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqVote::lastlogterm() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqVote.lastLogTerm)
  return _internal_lastlogterm();
}
inline void ReqVote::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogterm_ = value;
}
inline void ReqVote::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqVote.lastLogTerm)
}

// uint64 lastLogIndex = 4;
inline void ReqVote::clear_lastlogindex() {
  lastlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqVote::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqVote::lastlogindex() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqVote.lastLogIndex)
  return _internal_lastlogindex();
}
inline void ReqVote::_internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogindex_ = value;
}
inline void ReqVote::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqVote.lastLogIndex)
}

// -------------------------------------------------------------------

// RespVote

// uint64 term = 1;
inline void RespVote::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RespVote::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RespVote::term() const {
  // @@protoc_insertion_point(field_get:raftpb.RespVote.term)
  return _internal_term();
}
inline void RespVote::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RespVote::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.RespVote.term)
}

// bool voteGranted = 2;
inline void RespVote::clear_votegranted() {
  votegranted_ = false;
}
inline bool RespVote::_internal_votegranted() const {
  return votegranted_;
}
inline bool RespVote::votegranted() const {
  // @@protoc_insertion_point(field_get:raftpb.RespVote.voteGranted)
  return _internal_votegranted();
}
inline void RespVote::_internal_set_votegranted(bool value) {
  
  votegranted_ = value;
}
inline void RespVote::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:raftpb.RespVote.voteGranted)
}

// -------------------------------------------------------------------

// Entry

// uint64 term = 1;
inline void Entry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.term)
  return _internal_term();
}
inline void Entry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void Entry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.term)
}

// uint64 index = 2;
inline void Entry::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.index)
  return _internal_index();
}
inline void Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.index)
}

// bytes record = 3;
inline void Entry::clear_record() {
  record_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::record() const {
  // @@protoc_insertion_point(field_get:raftpb.Entry.record)
  return _internal_record();
}
inline void Entry::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:raftpb.Entry.record)
}
inline std::string* Entry::mutable_record() {
  // @@protoc_insertion_point(field_mutable:raftpb.Entry.record)
  return _internal_mutable_record();
}
inline const std::string& Entry::_internal_record() const {
  return record_.GetNoArena();
}
inline void Entry::_internal_set_record(const std::string& value) {
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entry::set_record(std::string&& value) {
  
  record_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.Entry.record)
}
inline void Entry::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.Entry.record)
}
inline void Entry::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.Entry.record)
}
inline std::string* Entry::_internal_mutable_record() {
  
  return record_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_record() {
  // @@protoc_insertion_point(field_release:raftpb.Entry.record)
  
  return record_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:raftpb.Entry.record)
}

// -------------------------------------------------------------------

// ReqAppendEntry

// uint64 term = 1;
inline void ReqAppendEntry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::term() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqAppendEntry.term)
  return _internal_term();
}
inline void ReqAppendEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void ReqAppendEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqAppendEntry.term)
}

// uint32 leaderId = 2;
inline void ReqAppendEntry::clear_leaderid() {
  leaderid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqAppendEntry::_internal_leaderid() const {
  return leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqAppendEntry::leaderid() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqAppendEntry.leaderId)
  return _internal_leaderid();
}
inline void ReqAppendEntry::_internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leaderid_ = value;
}
inline void ReqAppendEntry::set_leaderid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqAppendEntry.leaderId)
}

// uint64 prevLogTerm = 3;
inline void ReqAppendEntry::clear_prevlogterm() {
  prevlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::_internal_prevlogterm() const {
  return prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::prevlogterm() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqAppendEntry.prevLogTerm)
  return _internal_prevlogterm();
}
inline void ReqAppendEntry::_internal_set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prevlogterm_ = value;
}
inline void ReqAppendEntry::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqAppendEntry.prevLogTerm)
}

// uint64 prevLogIndex = 4;
inline void ReqAppendEntry::clear_prevlogindex() {
  prevlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::_internal_prevlogindex() const {
  return prevlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::prevlogindex() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqAppendEntry.prevLogIndex)
  return _internal_prevlogindex();
}
inline void ReqAppendEntry::_internal_set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prevlogindex_ = value;
}
inline void ReqAppendEntry::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqAppendEntry.prevLogIndex)
}

// repeated .raftpb.Entry entries = 5;
inline int ReqAppendEntry::_internal_entries_size() const {
  return entries_.size();
}
inline int ReqAppendEntry::entries_size() const {
  return _internal_entries_size();
}
inline void ReqAppendEntry::clear_entries() {
  entries_.Clear();
}
inline ::raftpb::Entry* ReqAppendEntry::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftpb.ReqAppendEntry.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >*
ReqAppendEntry::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftpb.ReqAppendEntry.entries)
  return &entries_;
}
inline const ::raftpb::Entry& ReqAppendEntry::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::raftpb::Entry& ReqAppendEntry::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftpb.ReqAppendEntry.entries)
  return _internal_entries(index);
}
inline ::raftpb::Entry* ReqAppendEntry::_internal_add_entries() {
  return entries_.Add();
}
inline ::raftpb::Entry* ReqAppendEntry::add_entries() {
  // @@protoc_insertion_point(field_add:raftpb.ReqAppendEntry.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raftpb::Entry >&
ReqAppendEntry::entries() const {
  // @@protoc_insertion_point(field_list:raftpb.ReqAppendEntry.entries)
  return entries_;
}

// uint64 leaderCommitIndex = 6;
inline void ReqAppendEntry::clear_leadercommitindex() {
  leadercommitindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::_internal_leadercommitindex() const {
  return leadercommitindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqAppendEntry::leadercommitindex() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqAppendEntry.leaderCommitIndex)
  return _internal_leadercommitindex();
}
inline void ReqAppendEntry::_internal_set_leadercommitindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  leadercommitindex_ = value;
}
inline void ReqAppendEntry::set_leadercommitindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leadercommitindex(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqAppendEntry.leaderCommitIndex)
}

// -------------------------------------------------------------------

// RespAppendEntry

// uint64 term = 1;
inline void RespAppendEntry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RespAppendEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RespAppendEntry::term() const {
  // @@protoc_insertion_point(field_get:raftpb.RespAppendEntry.term)
  return _internal_term();
}
inline void RespAppendEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RespAppendEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raftpb.RespAppendEntry.term)
}

// bool success = 2;
inline void RespAppendEntry::clear_success() {
  success_ = false;
}
inline bool RespAppendEntry::_internal_success() const {
  return success_;
}
inline bool RespAppendEntry::success() const {
  // @@protoc_insertion_point(field_get:raftpb.RespAppendEntry.success)
  return _internal_success();
}
inline void RespAppendEntry::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RespAppendEntry::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raftpb.RespAppendEntry.success)
}

// -------------------------------------------------------------------

// ReqTran

// uint32 src = 1;
inline void ReqTran::clear_src() {
  src_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqTran::_internal_src() const {
  return src_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqTran::src() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqTran.src)
  return _internal_src();
}
inline void ReqTran::_internal_set_src(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_ = value;
}
inline void ReqTran::set_src(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqTran.src)
}

// bytes record = 2;
inline void ReqTran::clear_record() {
  record_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqTran::record() const {
  // @@protoc_insertion_point(field_get:raftpb.ReqTran.record)
  return _internal_record();
}
inline void ReqTran::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:raftpb.ReqTran.record)
}
inline std::string* ReqTran::mutable_record() {
  // @@protoc_insertion_point(field_mutable:raftpb.ReqTran.record)
  return _internal_mutable_record();
}
inline const std::string& ReqTran::_internal_record() const {
  return record_.GetNoArena();
}
inline void ReqTran::_internal_set_record(const std::string& value) {
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqTran::set_record(std::string&& value) {
  
  record_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.ReqTran.record)
}
inline void ReqTran::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.ReqTran.record)
}
inline void ReqTran::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.ReqTran.record)
}
inline std::string* ReqTran::_internal_mutable_record() {
  
  return record_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqTran::release_record() {
  // @@protoc_insertion_point(field_release:raftpb.ReqTran.record)
  
  return record_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqTran::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:raftpb.ReqTran.record)
}

// -------------------------------------------------------------------

// RespTran

// uint32 err = 1;
inline void RespTran::clear_err() {
  err_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RespTran::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RespTran::err() const {
  // @@protoc_insertion_point(field_get:raftpb.RespTran.err)
  return _internal_err();
}
inline void RespTran::_internal_set_err(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  err_ = value;
}
inline void RespTran::set_err(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:raftpb.RespTran.err)
}

// string errmsg = 2;
inline void RespTran::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RespTran::errmsg() const {
  // @@protoc_insertion_point(field_get:raftpb.RespTran.errmsg)
  return _internal_errmsg();
}
inline void RespTran::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:raftpb.RespTran.errmsg)
}
inline std::string* RespTran::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:raftpb.RespTran.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& RespTran::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void RespTran::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RespTran::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftpb.RespTran.errmsg)
}
inline void RespTran::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftpb.RespTran.errmsg)
}
inline void RespTran::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftpb.RespTran.errmsg)
}
inline std::string* RespTran::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RespTran::release_errmsg() {
  // @@protoc_insertion_point(field_release:raftpb.RespTran.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RespTran::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:raftpb.RespTran.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raftpb::raftState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raftpb::raftState>() {
  return ::raftpb::raftState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftpb_2eproto
